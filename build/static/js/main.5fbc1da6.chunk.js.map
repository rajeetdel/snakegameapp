{"version":3,"sources":["index.js"],"names":["GridCell","props","classes","concat","ratCell","snakeCell","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","style","height","size","width","shallowEquals","arr1","arr2","length","equals","i","App","_this","Object","E_rajeet_study_Pesto_snakegameapp_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","E_rajeet_study_Pesto_snakegameapp_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","E_rajeet_study_Pesto_snakegameapp_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","snake","rat","status","direction","SnakeonProwl","bind","E_rajeet_study_Pesto_snakegameapp_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","doesntOverlap","setDirection","moveRat","hadRat","startGame","endGame","removeTimers","_this2","keyCode","_ref","changeDirection","forEach","dir","indexOf","setState","moveRatTimeout","clearTimeout","x","parseInt","Math","random","numCells","y","setTimeout","cell","_this3","newSnake","push","apply","slice","map","s","isValid","newSnakeSegment","lastSegment","lastPositionOptions","filter","c","SnakeonProwlInterval","setInterval","el","focus","clearInterval","_this4","floor","overlay","cellSize","cellIndexes","Array","from","keys","cells","key","onClick","onKeyDown","ref","tabIndex","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fbc1da6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n// for implementing single cell\r\nfunction GridCell(props) {\r\n  const classes = `grid-cell \r\n${props.ratCell ? \"grid-cell--rat\" : \"\"} \r\n${props.snakeCell ? \"grid-cell--snake\" : \"\"}\r\n`;\r\nreturn (\r\n    <div\r\n      className={classes}\r\n      style={{ height: props.size + \"px\", width: props.size + \"px\" }}\r\n      />\r\n  );\r\n}\r\n\r\nfunction arrayDiff(arr1, arr2){\r\n  return arr1.map((a, i)=>{ \r\n    return a - arr2[i]\r\n  })\r\n}\r\n\r\nfunction shallowEquals(arr1, arr2) {\r\n  if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\r\n  let equals = true;\r\n  for (var i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i]) equals = false;\r\n  }\r\n  return equals;\r\n}\r\n\r\n// the main view\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      snake: [],\r\n      rat: [],\r\n      // 0 = not started, 1 = in progress, 2= finished\r\n      status: 0,\r\n      // using keycodes to indicate direction\r\n      direction: 39\r\n    };\r\n    \r\n    this.SnakeonProwl = this.SnakeonProwl.bind(this);\r\n    this.doesntOverlap = this.doesntOverlap.bind(this);\r\n    this.setDirection = this.setDirection.bind(this);\r\n    this.moveRat = this.moveRat.bind(this);\r\n    this.hadRat = this.hadRat.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.endGame = this.endGame.bind(this);    \r\n    this.removeTimers = this.removeTimers.bind(this);\r\n  }\r\n  \r\n  setDirection({ keyCode }) {\r\n    // if it's the same direction or simply reversing, ignore\r\n    let changeDirection = true;\r\n    [[38, 40], [37, 39]].forEach(dir => {\r\n      if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\r\n        changeDirection = false;\r\n      }\r\n    });\r\n\r\n    if (changeDirection) this.setState({ direction: keyCode });\r\n  }\r\n  \r\n  // randomly place rat\r\n  moveRat() {\r\n    if (this.moveRatTimeout) clearTimeout(this.moveRatTimeout)\r\n    const x = parseInt(Math.random() * this.numCells);\r\n    const y = parseInt(Math.random() * this.numCells);\r\n    this.setState({ rat: [x, y] });\r\n    this.moveRatTimeout = setTimeout(this.moveRat, 5000)\r\n  }\r\n  \r\n  // is the cell's position inside the grid?\r\n  isValid(cell) {\r\n    return (\r\n      cell[0] > -1 &&\r\n      cell[1] > -1 &&\r\n      cell[0] < this.numCells &&\r\n      cell[1] < this.numCells\r\n    );\r\n  }\r\n\r\n  SnakeonProwl() {\r\n    const newSnake = [];\r\n    // set in the new \"head\" of the snake    \r\n    switch(this.state.direction) {\r\n        // down\r\n      case 40:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\r\n        break;\r\n        // up\r\n      case 38:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\r\n        break;\r\n        // right\r\n      case 39:\r\n        newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\r\n        break;\r\n        // left\r\n      case 37:\r\n        newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\r\n        break;\r\n      default:\r\n        // do nothing\r\n                                }\r\n    // now shift each \"body\" segment to the previous segment's position\r\n    [].push.apply(\r\n      newSnake,\r\n      this.state.snake.slice(1).map((s, i) => {\r\n        // by slicing make a copy and map it\r\n        return this.state.snake[i];\r\n      })\r\n    );\r\n\r\n    this.setState({ snake: newSnake });\r\n\r\n    this.hadRat(newSnake);\r\n    if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\r\n      // end the game\r\n      this.endGame()\r\n    } \r\n  }\r\n\r\n  hadRat(newSnake) {\r\n    if (!shallowEquals(newSnake[0], this.state.rat)) return\r\n      // snake gets longer\r\n      let newSnakeSegment;\r\n      const lastSegment = newSnake[newSnake.length - 1];\r\n\r\n      // some potential positions, we can choose the best looking one\r\n      let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\r\n      \r\n      // the snake is moving along the y-axis, so try that instead\r\n      if ( newSnake.length > 1 ) {\r\n        lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\r\n      }\r\n\r\n      for (var i = 0; i < lastPositionOptions.length; i++) {\r\n        newSnakeSegment = [\r\n          lastSegment[0] + lastPositionOptions[i][0],\r\n          lastSegment[1] + lastPositionOptions[i][1]\r\n        ];\r\n        if (this.isValid(newSnakeSegment)) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        snake: newSnake.concat([newSnakeSegment]),\r\n        rat: []\r\n      });\r\n    this.moveRat();\r\n  }\r\n\r\n  doesntOverlap(snake) {\r\n    return (\r\n      snake.slice(1).filter(c => {\r\n        return shallowEquals(snake[0], c);\r\n      }).length === 0\r\n    );\r\n  }\r\n\r\n  startGame() {\r\n    this.removeTimers();\r\n    this.SnakeonProwlInterval = setInterval(this.SnakeonProwl, 150);\r\n    this.moveRat();\r\n\r\n    this.setState({\r\n      status: 1,\r\n      snake: [[5, 5]],\r\n      rat: [10, 10]\r\n    });\r\n    //need to focus so keydown listener will work!\r\n    this.el.focus();\r\n  }\r\n  \r\n  endGame(){\r\n    this.removeTimers();\r\n    this.setState({\r\n      status : 2\r\n    })\r\n  }\r\n\r\n  removeTimers() {\r\n    if (this.SnakeonProwlInterval) clearInterval(this.SnakeonProwlInterval);\r\n    if (this.moveRatTimeout) clearTimeout(this.moveRatTimeout)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeTimers();\r\n  }\r\n\r\n  render() {\r\n    // each cell should be approximately 15px wide, so calculate how many we need\r\n    this.numCells = Math.floor(this.props.size / 15);\r\n    const cellSize = this.props.size / this.numCells;\r\n    const cellIndexes = Array.from(Array(this.numCells).keys());\r\n    const cells = cellIndexes.map(y => {\r\n      return cellIndexes.map(x => {\r\n        const ratCell = this.state.rat[0] === x && this.state.rat[1] === y;\r\n        let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\r\n        snakeCell = snakeCell.length && snakeCell[0];\r\n\r\n        return (\r\n          <GridCell\r\n            ratCell={ratCell}\r\n            snakeCell={snakeCell}\r\n            size={cellSize}\r\n            key={x + \" \" + y}\r\n            />\r\n        );\r\n      });\r\n    });\r\n\r\n    let overlay;\r\n    if (this.state.status === 0) {\r\n      overlay = (\r\n        <div className=\"snake-app__overlay\">\r\n          <button onClick={this.startGame}>Start game!</button>\r\n        </div>\r\n      );\r\n    } else if (this.state.status === 2) {\r\n      overlay = (\r\n        <div className=\"snake-app__overlay\">\r\n          <div className=\"mb-1\"><b>GAME OVER!</b></div>\r\n          <div className=\"mb-1\">Your score: {this.state.snake.length} </div>\r\n          <button onClick={this.startGame}>Start a new game</button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div\r\n        className=\"snake-app\"\r\n        onKeyDown={this.setDirection}\r\n        style={{\r\n          width: this.props.size + \"px\",\r\n            height: this.props.size + \"px\"\r\n        }}\r\n        ref={el => (this.el = el)}\r\n        tabIndex={-1}\r\n        >\r\n        {overlay}\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            width: this.props.size + \"px\",\r\n              height: this.props.size + \"px\"\r\n          }}\r\n          >\r\n          {cells}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App size={350} />, document.getElementById(\"root\"));"],"sourceRoot":""}